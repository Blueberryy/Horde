@include "base.fgd" 

// Horde.fgd made by: GoodFishMan //


//////////////////////////////
//Spawn distribution setters//
/////////////////////////////

// You only need to place ONE such entity in your map.
// It decides the spawn patterns of enemies. You can place it anywhere in the map.

@PointClass base(Targetname) iconsprite("editor/assault_rally.vmt") = info_horde_spawn_distribution_proximity : 
	"Spawn enemies based on proximity (uses min/max distances)."
[
	
]

@PointClass base(Targetname) iconsprite("editor/assault_rally.vmt") = info_horde_spawn_distribution_uniform : 
	"Spawn enemies randomly across all spawn points."
[
	
]

@PointClass base(Targetname) iconsprite("editor/assault_rally.vmt") = info_horde_spawn_distribution_proximity_noisy : 
	"Similar to the default setting, but allows few enemies to spawn randomly. Essentially a combination of uniform and proximity."
[
	
]

////////////////////////////
// END OF SPAWN SETTINGS //
///////////////////////////

@SolidClass base(Trigger, Targetname) = trigger_horde_buyzone :
	"If this is present, only players inside the trigger are able to open the shop."
[

]

@PointClass base(Targetname, Angles) studio("models/zombie/classic.mdl") = info_horde_enemy_spawn :
	"If this is present in a map, Horde will use those points to spawn enemies, instead of searching for info nodes. Note that when fixed spawn points are present, enemies will no longer despawn due to distance mechanics."
[

]

@PointClass base(Targetname, Angles) studio("models/zombie/poison.mdl") = info_horde_boss_spawn :
	"If this is present in a map, Horde will use those points to spawn bosses."
[

]

@PointClass base(Targetname, Angles) studio("models/Items/BoxMRounds.mdl") = info_horde_ammobox_spawn :
	"An ammo box spawn point. If this is present in a map, Horde will spawn ammo boxes only on those points."
[

]

////////////////////////////
//       WAVE LOGIC      //
///////////////////////////

@PointClass base(Targetname) = logic_horde_waves : "Horde: Monitors/Controls wave information."
[
	// Keys
	wave(integer) : "Wave" : 1 : "Any On* outputs will watch for this wave. Use -1 for all waves."

	// Inputs
	input advancewave(void)     : "Advances to the next wave."
	input endwave(void)         : "Ends the current wave."
	input setwave(integer)      : "Sets the wave to the number specified."
	input setwaves(integer)     : "Sets the total amount of waves to the number specified."
	input setwavestart(integer) : "Ends the wave and sets the break time to the number specified. i.e. Setting the time for the next wave to start."
	input setwaveend(integer)   : "Not yet implemented."

	// Outputs
	output onwavestart(void)    : "Called when the specified wave has started."
	output onwaveend(void)      : "Called when the specified wave has ended."
]

////////////////////////////
//     ECONOMY LOGIC      //
///////////////////////////

// You only need to place ONE such entity in your map.
// To use default values, leave them as 0 or empty.
@PointClass base(Targetname) = logic_horde_economy : "Horde: Controls global game economy."
[
	// Keys
	startingmoney(integer) : "Starting Money" : 0 : "The amount of money to start with."
	killrewardbase(integer) : "Kill Reward Base" : 0 : "Reward for killing an enemy."
	roundbonusbase(integer) : "Round Bonus Base" : 0 : "Bonus after clearing a wave."

	// Inputs
	input setstartingworth(integer) : "Sets the amount of worth to start with."
	input setkillrewardbase(integer) : "Sets the base reward for killing an enemy."
	input setroundbonusbase(integer) : "Sets the bonus after clearing a wave."
]

////////////////////////////
//     ACHIEVEMENTS      //
///////////////////////////
// You only need to place ONE such entity in your map.
// To use default values, leave them as 0 or empty.
@PointClass base(Targetname) = logic_horde_achievement : "Horde: Achievements."
[
	// Keys
	achievement(string) : "Achievement Name" : 0 : "The name of the achievement."
	description(string) : "Achievement Description" : 0 : "The description of the achievement."

	// Inputs
	input activateachievement(target_destination) : "Activates the achievement for the entity (player)."
]